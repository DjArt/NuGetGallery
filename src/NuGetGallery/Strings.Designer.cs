//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NuGetGallery {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("NuGetGallery.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The account &apos;{0}&apos; was already deleted. No action was performed..
        /// </summary>
        public static string AccountDelete_AccountAlreadyDeleted {
            get {
                return ResourceManager.GetString("AccountDelete_AccountAlreadyDeleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The request failed to be submitted. Please try again or contact support..
        /// </summary>
        public static string AccountDelete_CreateSupportRequestFails {
            get {
                return ResourceManager.GetString("AccountDelete_CreateSupportRequestFails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на An exception was encountered while trying to delete the account &apos;{0}&apos;: {1}.
        /// </summary>
        public static string AccountDelete_Fail {
            get {
                return ResourceManager.GetString("AccountDelete_Fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Account &apos;{0}&apos; cannot be deleted because it is an organization. The organization must be manually migrated to a user account without memberships before the account can be deleted..
        /// </summary>
        public static string AccountDelete_OrganizationDeleteNotImplemented {
            get {
                return ResourceManager.GetString("AccountDelete_OrganizationDeleteNotImplemented", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Your account is being deleted. You have been logged out..
        /// </summary>
        public static string AccountDelete_SelfServiceSuccess {
            get {
                return ResourceManager.GetString("AccountDelete_SelfServiceSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The account &apos;{0}&apos; was deleted succesfully..
        /// </summary>
        public static string AccountDelete_Success {
            get {
                return ResourceManager.GetString("AccountDelete_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Account Deletion Request.
        /// </summary>
        public static string AccountDelete_SupportRequestTitle {
            get {
                return ResourceManager.GetString("AccountDelete_SupportRequestTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The account with the email {0} is linked to another Microsoft account.
        ///If you would like to update the linked Microsoft account you can do so from the account settings page..
        /// </summary>
        public static string AccountIsLinkedToAnotherExternalAccount {
            get {
                return ResourceManager.GetString("AccountIsLinkedToAnotherExternalAccount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на An exception was encoutered while trying to delete the account. Please contact support for assistance..
        /// </summary>
        public static string AccountSelfDelete_Fail {
            get {
                return ResourceManager.GetString("AccountSelfDelete_Fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на User &apos;{0}&apos; is already a member of this organization..
        /// </summary>
        public static string AddMember_AlreadyAMember {
            get {
                return ResourceManager.GetString("AddMember_AlreadyAMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на There is no request for user &apos;{0}&apos; for join this organization with that token..
        /// </summary>
        public static string AddMember_MissingRequest {
            get {
                return ResourceManager.GetString("AddMember_MissingRequest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You must add a member by username, not an email address..
        /// </summary>
        public static string AddMember_NameIsEmail {
            get {
                return ResourceManager.GetString("AddMember_NameIsEmail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You cannot accept this request because you no longer meet the requirements of this organization. {0} Please contact support for more details..
        /// </summary>
        public static string AddMember_PolicyFailure {
            get {
                return ResourceManager.GetString("AddMember_PolicyFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You are now a member of organization &apos;{0}&apos;..
        /// </summary>
        public static string AddMember_Success {
            get {
                return ResourceManager.GetString("AddMember_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на User &apos;{0}&apos; has not linked their account to an AAD credential matching this organization..
        /// </summary>
        public static string AddMember_UserDoesNotMeetOrganizationPolicy {
            get {
                return ResourceManager.GetString("AddMember_UserDoesNotMeetOrganizationPolicy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на User &apos;{0}&apos; is an organization and cannot be a member of another organization..
        /// </summary>
        public static string AddMember_UserIsOrganization {
            get {
                return ResourceManager.GetString("AddMember_UserIsOrganization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на User &apos;{0}&apos; has not confirmed their email..
        /// </summary>
        public static string AddMember_UserNotConfirmed {
            get {
                return ResourceManager.GetString("AddMember_UserNotConfirmed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на User &apos;{0}&apos; does not exist. .
        /// </summary>
        public static string AddMember_UserNotFound {
            get {
                return ResourceManager.GetString("AddMember_UserNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The user &apos;{0}&apos; is already an owner or pending owner of the package..
        /// </summary>
        public static string AddOwner_AlreadyOwner {
            get {
                return ResourceManager.GetString("AddOwner_AlreadyOwner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Current user not found..
        /// </summary>
        public static string AddOwner_CurrentUserNotFound {
            get {
                return ResourceManager.GetString("AddOwner_CurrentUserNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You must add an owner by username, not an email address..
        /// </summary>
        public static string AddOwner_NameIsEmail {
            get {
                return ResourceManager.GetString("AddOwner_NameIsEmail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You are not the package owner..
        /// </summary>
        public static string AddOwner_NotPackageOwner {
            get {
                return ResourceManager.GetString("AddOwner_NotPackageOwner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Sorry, &apos;{0}&apos; hasn&apos;t verified their email account yet and we cannot proceed with the request..
        /// </summary>
        public static string AddOwner_OwnerNotConfirmed {
            get {
                return ResourceManager.GetString("AddOwner_OwnerNotConfirmed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Owner not found..
        /// </summary>
        public static string AddOwner_OwnerNotFound {
            get {
                return ResourceManager.GetString("AddOwner_OwnerNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Package not found..
        /// </summary>
        public static string AddOwner_PackageNotFound {
            get {
                return ResourceManager.GetString("AddOwner_PackageNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Please confirm if you would like to proceed adding &apos;{0}&apos; as a co-owner of this package..
        /// </summary>
        public static string AddOwnerConfirmation {
            get {
                return ResourceManager.GetString("AddOwnerConfirmation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на User &apos;{0}&apos; has the following requirements that will be enforced for all co-owners once the user accepts ownership of this package:
        ///{1}
        ///Note this step cannot be easily undone. If you are unsure and/or need more information, please contact &apos;{2}&apos;..
        /// </summary>
        public static string AddOwnerConfirmation_SecurePushRequiredByNewOwner {
            get {
                return ResourceManager.GetString("AddOwnerConfirmation_SecurePushRequiredByNewOwner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Owner(s) &apos;{0}&apos; has (have) the following requirements that will be enforced for user &apos;{1}&apos; once the user accepts ownership of this package:
        ///{2}
        ///Note this step cannot be easily undone. If you are unsure and/or need more information, please contact &apos;{3}&apos;..
        /// </summary>
        public static string AddOwnerConfirmation_SecurePushRequiredByOwner {
            get {
                return ResourceManager.GetString("AddOwnerConfirmation_SecurePushRequiredByOwner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Pending owner(s) &apos;{0}&apos; has (have) the following requirements that will be enforced for all co-owners, including &apos;{1}&apos;, once ownership requests are accepted:
        ///{2}
        ///Note this step cannot be easily undone. If you are unsure and/or need more information, please contact &apos;{3}&apos;..
        /// </summary>
        public static string AddOwnerConfirmation_SecurePushRequiredByPendingOwner {
            get {
                return ResourceManager.GetString("AddOwnerConfirmation_SecurePushRequiredByPendingOwner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Owner(s) &apos;{0}&apos; has (have) the following requirements that are now enforced for co-owner(s) &apos;{1}&apos;:
        ///
        ///{2}
        ///
        ///For more information, please contact &apos;{3}&apos;..
        /// </summary>
        public static string AddOwnerNotification_SecurePushRequired_Propagators {
            get {
                return ResourceManager.GetString("AddOwnerNotification_SecurePushRequired_Propagators", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Owner(s) &apos;{0}&apos; has (have) the following requirements that are now enforced for your account:
        ///
        ///{1}
        ///
        ///For more information, please contact &apos;{2}&apos;..
        /// </summary>
        public static string AddOwnerNotification_SecurePushRequired_Subscribed {
            get {
                return ResourceManager.GetString("AddOwnerNotification_SecurePushRequired_Subscribed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Note: The following policies will be enforced on package co-owners once you accept this request. If you are unsure and/or need more information, please contact &apos;{0}&apos;.
        ///
        ///{1}.
        /// </summary>
        public static string AddOwnerRequest_SecurePushRequiredByNewOwner {
            get {
                return ResourceManager.GetString("AddOwnerRequest_SecurePushRequiredByNewOwner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Note: Owner(s) &apos;{0}&apos; has (have) the following policies that will be enforced on your account once you accept this request. If you are unsure and/or need more information, please contact &apos;{1}&apos;.
        ///
        ///{2}.
        /// </summary>
        public static string AddOwnerRequest_SecurePushRequiredByOwner {
            get {
                return ResourceManager.GetString("AddOwnerRequest_SecurePushRequiredByOwner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Note: Pending owner(s) &apos;{0}&apos; has (have) the following policies that will be enforced on your account once ownership requests are accepted. If you are unsure and/or need more information, please contact &apos;{1}&apos;.
        ///
        ///{2}.
        /// </summary>
        public static string AddOwnerRequest_SecurePushRequiredByPendingOwner {
            get {
                return ResourceManager.GetString("AddOwnerRequest_SecurePushRequiredByPendingOwner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You are already signed in!.
        /// </summary>
        public static string AlreadyLoggedIn {
            get {
                return ResourceManager.GetString("AlreadyLoggedIn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на a minute.
        /// </summary>
        public static string AMinute {
            get {
                return ResourceManager.GetString("AMinute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на API key can not be the default Guid..
        /// </summary>
        public static string ApiKeyCanNotBeDefaultGuid {
            get {
                return ResourceManager.GetString("ApiKeyCanNotBeDefaultGuid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Can&apos;t generate an API key without a description..
        /// </summary>
        public static string ApiKeyDescriptionRequired {
            get {
                return ResourceManager.GetString("ApiKeyDescriptionRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A new API key has been generated. Check below and make sure to copy the value, as now is the only time it will be visible..
        /// </summary>
        public static string ApiKeyGenerated {
            get {
                return ResourceManager.GetString("ApiKeyGenerated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The specified API key is invalid, has expired, or does not have permission to access the specified package..
        /// </summary>
        public static string ApiKeyNotAuthorized {
            get {
                return ResourceManager.GetString("ApiKeyNotAuthorized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You must specify a package owner to generate an API key..
        /// </summary>
        public static string ApiKeyOwnerRequired {
            get {
                return ResourceManager.GetString("ApiKeyOwnerRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The specified API key is scoped to an owner that is unconfirmed. You must confirm the owner that this API key is scoped to before you can use it..
        /// </summary>
        public static string ApiKeyOwnerUnconfirmed {
            get {
                return ResourceManager.GetString("ApiKeyOwnerUnconfirmed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на An API key must be provided in the &apos;X-NuGet-ApiKey&apos; header to use this service.
        /// </summary>
        public static string ApiKeyRequired {
            get {
                return ResourceManager.GetString("ApiKeyRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The current user does not have permission to create an ApiKey with the specified owner or scopes..
        /// </summary>
        public static string ApiKeyScopesNotAllowed {
            get {
                return ResourceManager.GetString("ApiKeyScopesNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You must confirm the email address for the account in order to use the API key..
        /// </summary>
        public static string ApiKeyUserAccountIsUnconfirmed {
            get {
                return ResourceManager.GetString("ApiKeyUserAccountIsUnconfirmed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The argument cannot be null or empty..
        /// </summary>
        public static string ArgumentCannotBeNullOrEmpty {
            get {
                return ResourceManager.GetString("ArgumentCannotBeNullOrEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unknown error!.
        /// </summary>
        public static string AuthenticationFailure_UnkownError {
            get {
                return ResourceManager.GetString("AuthenticationFailure_UnkownError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The &apos;{0}&apos; authentication provider is disabled and cannot be used to authenticate
        ///.
        /// </summary>
        public static string AuthenticationProviderDisabled {
            get {
                return ResourceManager.GetString("AuthenticationProviderDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на (automated).
        /// </summary>
        public static string AutomatedPackageDeleteSignature {
            get {
                return ResourceManager.GetString("AutomatedPackageDeleteSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Azure Active Directory account.
        /// </summary>
        public static string AzureActiveDirectory_AccountNoun {
            get {
                return ResourceManager.GetString("AzureActiveDirectory_AccountNoun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Register with Azure Active Directory.
        /// </summary>
        public static string AzureActiveDirectory_RegisterMessage {
            get {
                return ResourceManager.GetString("AzureActiveDirectory_RegisterMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Sign in with Azure Active Directory.
        /// </summary>
        public static string AzureActiveDirectory_SignInMessage {
            get {
                return ResourceManager.GetString("AzureActiveDirectory_SignInMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The pending organization member was deleted..
        /// </summary>
        public static string CancelMemberRequest_Success {
            get {
                return ResourceManager.GetString("CancelMemberRequest_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на There is no request for user &apos;{0}&apos; to join this organization..
        /// </summary>
        public static string CancelMembershipRequest_MissingRequest {
            get {
                return ResourceManager.GetString("CancelMembershipRequest_MissingRequest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enqueuing unavailable: the gallery is currently in read only mode, with limited service. Please try again later..
        /// </summary>
        public static string CannotEnqueueDueToReadOnly {
            get {
                return ResourceManager.GetString("CannotEnqueueDueToReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Oops! You can&apos;t remove the only credential that can be used to sign in to the website!.
        /// </summary>
        public static string CannotRemoveOnlyLoginCredential {
            get {
                return ResourceManager.GetString("CannotRemoveOnlyLoginCredential", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The certificate does not exist..
        /// </summary>
        public static string CertificateDoesNotExist {
            get {
                return ResourceManager.GetString("CertificateDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A certificate file is required..
        /// </summary>
        public static string CertificateFileIsRequired {
            get {
                return ResourceManager.GetString("CertificateFileIsRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Failed to update the Microsoft account with &apos;{0}&apos;. This could happen if it is already linked to another NuGet account. See {1} for more details..
        /// </summary>
        public static string ChangeCredential_Failed {
            get {
                return ResourceManager.GetString("ChangeCredential_Failed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The change of Azure active directory account is not allowed by your organization(s): {0}. Please leave these organization(s) to change your login..
        /// </summary>
        public static string ChangeCredential_NotAllowed {
            get {
                return ResourceManager.GetString("ChangeCredential_NotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No valid external provider found for authentication.
        /// </summary>
        public static string ChangeCredential_ProviderNotFound {
            get {
                return ResourceManager.GetString("ChangeCredential_ProviderNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Successfully linked the Microsoft account ({0})..
        /// </summary>
        public static string ChangeCredential_Success {
            get {
                return ResourceManager.GetString("ChangeCredential_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Successfully linked the Microsoft account ({0}). Note that the email address associated with the new linked Microsoft account is different than the NuGet.org account email ({1})..
        /// </summary>
        public static string ChangeCredential_SuccessDifferentEmail {
            get {
                return ResourceManager.GetString("ChangeCredential_SuccessDifferentEmail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на SKIPPED! Package file blob {0} already exists.
        /// </summary>
        public static string CopyExternalPackages_PackageFileBlobAlreadyExists {
            get {
                return ResourceManager.GetString("CopyExternalPackages_PackageFileBlobAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Saving the package file {0} to blob storage as {1}.
        /// </summary>
        public static string CopyExternalPackages_SavingPackageFileBlob {
            get {
                return ResourceManager.GetString("CopyExternalPackages_SavingPackageFileBlob", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Could not find anyone with that username or email..
        /// </summary>
        public static string CouldNotFindAnyoneWithThatUsernameOrEmail {
            get {
                return ResourceManager.GetString("CouldNotFindAnyoneWithThatUsernameOrEmail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The credential has been expired..
        /// </summary>
        public static string CredentialExpired {
            get {
                return ResourceManager.GetString("CredentialExpired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Credential not found..
        /// </summary>
        public static string CredentialNotFound {
            get {
                return ResourceManager.GetString("CredentialNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The credential has been removed..
        /// </summary>
        public static string CredentialRemoved {
            get {
                return ResourceManager.GetString("CredentialRemoved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на API key.
        /// </summary>
        public static string CredentialType_ApiKey {
            get {
                return ResourceManager.GetString("CredentialType_ApiKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Password.
        /// </summary>
        public static string CredentialType_Password {
            get {
                return ResourceManager.GetString("CredentialType_Password", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The current password you provided is incorrect..
        /// </summary>
        public static string CurrentPasswordIncorrect {
            get {
                return ResourceManager.GetString("CurrentPasswordIncorrect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The NuGet service is experiencing a service interruption. Try requesting a specific package version instead..
        /// </summary>
        public static string DatabaseUnavailable_TrySpecificVersion {
            get {
                return ResourceManager.GetString("DatabaseUnavailable_TrySpecificVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на An unexpected error occurred. Contact support for assistance..
        /// </summary>
        public static string DefaultUserSafeExceptionMessage {
            get {
                return ResourceManager.GetString("DefaultUserSafeExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Organization member &apos;{0}&apos; is the last administrator and cannot be deleted..
        /// </summary>
        public static string DeleteMember_CannotDeleteLastAdmin {
            get {
                return ResourceManager.GetString("DeleteMember_CannotDeleteLastAdmin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You can&apos;t leave the organization. In order to leave the organization, another collaborator must be assigned as an administrator..
        /// </summary>
        public static string DeleteMember_CannotRemoveLastAdmin {
            get {
                return ResourceManager.GetString("DeleteMember_CannotRemoveLastAdmin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The organization member was deleted..
        /// </summary>
        public static string DeleteMember_Success {
            get {
                return ResourceManager.GetString("DeleteMember_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The provided Type in the delete request is not valid..
        /// </summary>
        public static string DeletePackage_InvalidDeleteType {
            get {
                return ResourceManager.GetString("DeletePackage_InvalidDeleteType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Deleting a package through the API is not enabled for your user account..
        /// </summary>
        public static string DeletePackage_NotAllowed {
            get {
                return ResourceManager.GetString("DeletePackage_NotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The provided package has more than {0} downloads and therefore cannot be deleted via API..
        /// </summary>
        public static string DeletePackage_TooManyDownloads {
            get {
                return ResourceManager.GetString("DeletePackage_TooManyDownloads", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A package cannot be the alternate package of itself..
        /// </summary>
        public static string DeprecatePackage_AlternateOfSelf {
            get {
                return ResourceManager.GetString("DeprecatePackage_AlternateOfSelf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You must add a custom message if you are deprecating a package due to another reason!.
        /// </summary>
        public static string DeprecatePackage_CustomMessageRequired {
            get {
                return ResourceManager.GetString("DeprecatePackage_CustomMessageRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Your custom message is too long. It must be under {0} characters..
        /// </summary>
        public static string DeprecatePackage_CustomMessageTooLong {
            get {
                return ResourceManager.GetString("DeprecatePackage_CustomMessageTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You do not have permission to deprecate this package..
        /// </summary>
        public static string DeprecatePackage_Forbidden {
            get {
                return ResourceManager.GetString("DeprecatePackage_Forbidden", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Package &apos;{0}&apos; is locked and cannot have its deprecation changed..
        /// </summary>
        public static string DeprecatePackage_Locked {
            get {
                return ResourceManager.GetString("DeprecatePackage_Locked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Package &apos;{0}&apos; could not be found..
        /// </summary>
        public static string DeprecatePackage_MissingRegistration {
            get {
                return ResourceManager.GetString("DeprecatePackage_MissingRegistration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на At least one version of package &apos;{0}&apos; specified could not be found..
        /// </summary>
        public static string DeprecatePackage_MissingVersion {
            get {
                return ResourceManager.GetString("DeprecatePackage_MissingVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Alternate package &apos;{0} {1}&apos; does not exist..
        /// </summary>
        public static string DeprecatePackage_NoAlternatePackage {
            get {
                return ResourceManager.GetString("DeprecatePackage_NoAlternatePackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Alternate package &apos;{0}&apos; does not exist..
        /// </summary>
        public static string DeprecatePackage_NoAlternatePackageRegistration {
            get {
                return ResourceManager.GetString("DeprecatePackage_NoAlternatePackageRegistration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You must select at least one version to deprecate!.
        /// </summary>
        public static string DeprecatePackage_NoVersions {
            get {
                return ResourceManager.GetString("DeprecatePackage_NoVersions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Please refer to the {0} for steps to resolve this issue..
        /// </summary>
        public static string DirectUserToUnmanagedTenantFAQ {
            get {
                return ResourceManager.GetString("DirectUserToUnmanagedTenantFAQ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The password login is discontinued and has been removed for your account. Please use your Microsoft account to log into {0} going forward..
        /// </summary>
        public static string DiscontinuedLogin_PasswordRemoved {
            get {
                return ResourceManager.GetString("DiscontinuedLogin_PasswordRemoved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Owner(s) &apos;{0}&apos; require(s) that all co-owners use client version {1} or higher to push all of their packages. For more information, contact {2}.
        ///.
        /// </summary>
        public static string DisplayPackage_SecurePushRequired {
            get {
                return ResourceManager.GetString("DisplayPackage_SecurePushRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The email address &apos;{0}&apos; is already in use by a different account..
        /// </summary>
        public static string EmailAddressBeingUsed {
            get {
                return ResourceManager.GetString("EmailAddressBeingUsed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на API key &apos;{0}&apos; was added to your account and can now be used. If you did not request this change, please reply to this email to contact support..
        /// </summary>
        public static string Emails_ApiKeyAdded_Body {
            get {
                return ResourceManager.GetString("Emails_ApiKeyAdded_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на API key &apos;{0}&apos; was removed from your account and can no longer be used. If you did not request this change, please reply to this email to contact support..
        /// </summary>
        public static string Emails_ApiKeyRemoved_Body {
            get {
                return ResourceManager.GetString("Emails_ApiKeyRemoved_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A {0} was added to your account and can now be used to sign in. If you did not request this change, please reply to this email to contact support..
        /// </summary>
        public static string Emails_CredentialAdded_Body {
            get {
                return ResourceManager.GetString("Emails_CredentialAdded_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [{0}] {1} added to your account.
        /// </summary>
        public static string Emails_CredentialAdded_Subject {
            get {
                return ResourceManager.GetString("Emails_CredentialAdded_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A {0} was removed from your account and can no longer be used to sign in. If you did not request this change, please reply to this email to contact support..
        /// </summary>
        public static string Emails_CredentialRemoved_Body {
            get {
                return ResourceManager.GetString("Emails_CredentialRemoved_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [{0}] {1} removed from your account.
        /// </summary>
        public static string Emails_CredentialRemoved_Subject {
            get {
                return ResourceManager.GetString("Emails_CredentialRemoved_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The word on the street is you lost your password. Sorry to hear it!
        ///If you haven&apos;t forgotten your password you can safely ignore this email. Your password has not been changed.
        ///
        ///Click the following link within the next hour to reset your password:
        ///
        ///[{0}]({0})
        ///
        ///Note that NuGet.org password login is no longer supported. Please use Microsoft account to sign into {1}.
        ///
        ///Thanks,
        ///The {1} Team.
        /// </summary>
        public static string Emails_ForgotPassword_MarkdownBody {
            get {
                return ResourceManager.GetString("Emails_ForgotPassword_MarkdownBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [{0}] Please reset your password..
        /// </summary>
        public static string Emails_ForgotPassword_Subject {
            get {
                return ResourceManager.GetString("Emails_ForgotPassword_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The word on the street is you want to set a password for your account.
        ///If you didn&apos;t request a password, you can safely ignore this message. A password has not yet been set.
        ///
        ///Click the following link within the next hour to set your password:
        ///
        ///[{0}]({0})
        ///
        ///Note that NuGet.org password login is no longer supported. Please use Microsoft account to sign into {1}.
        ///
        ///Thanks,
        ///The {1} Team.
        /// </summary>
        public static string Emails_SetPassword_MarkdownBody {
            get {
                return ResourceManager.GetString("Emails_SetPassword_MarkdownBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [{0}] Please set your password..
        /// </summary>
        public static string Emails_SetPassword_Subject {
            get {
                return ResourceManager.GetString("Emails_SetPassword_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Error in sending mail : {0}.
        /// </summary>
        public static string ErrorInSendingMail {
            get {
                return ResourceManager.GetString("ErrorInSendingMail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Your account credential expired or you did not allow us access to your account. Try logging in again..
        /// </summary>
        public static string ExternalAccountLinkExpired {
            get {
                return ResourceManager.GetString("ExternalAccountLinkExpired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Failed to read the package file. Ensure it is a valid NuGet package with a valid manifest..
        /// </summary>
        public static string FailedToReadUploadFile {
            get {
                return ResourceManager.GetString("FailedToReadUploadFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Automatic hard-delete for reupload of package that failed validation.
        /// </summary>
        public static string FailedValidationHardDeleteReason {
            get {
                return ResourceManager.GetString("FailedValidationHardDeleteReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The API key &apos;{0}&apos; is invalid..
        /// </summary>
        public static string InvalidApiKey {
            get {
                return ResourceManager.GetString("InvalidApiKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The Password Reset Token is not valid or expired..
        /// </summary>
        public static string InvalidOrExpiredPasswordResetToken {
            get {
                return ResourceManager.GetString("InvalidOrExpiredPasswordResetToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The package framework &apos;{0}&apos; is not supported. Frameworks within the portable profile are not allowed to have profiles themselves..
        /// </summary>
        public static string InvalidPortableFramework {
            get {
                return ResourceManager.GetString("InvalidPortableFramework", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Recaptcha response was not valid. Try again or email support if you need assistance..
        /// </summary>
        public static string InvalidRecaptchaResponse {
            get {
                return ResourceManager.GetString("InvalidRecaptchaResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Job Log Blob name is invalid Bob! Expected [jobname].[yyyy-MM-dd].json or [jobname].json. Got: {0}.
        /// </summary>
        public static string JobLogBlobNameInvalid {
            get {
                return ResourceManager.GetString("JobLogBlobNameInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The user &apos;{0}&apos; was not validated through LDAP. Please check the LDAP username and password..
        /// </summary>
        public static string LdapUserInvalid {
            get {
                return ResourceManager.GetString("LdapUserInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You have been logged out as your NuGet account was deleted. Please contact support if this is unexpected..
        /// </summary>
        public static string LoggedInUserDeleted {
            get {
                return ResourceManager.GetString("LoggedInUserDeleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The user &apos;{0}&apos; is already an owner or pending owner of this package..
        /// </summary>
        public static string ManagePackageOwners_AlreadyPending {
            get {
                return ResourceManager.GetString("ManagePackageOwners_AlreadyPending", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на An unexpected error occurred: {0}.
        /// </summary>
        public static string ManagePackageOwners_Error {
            get {
                return ResourceManager.GetString("ManagePackageOwners_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Please enter a valid user name..
        /// </summary>
        public static string ManagePackageOwners_InvalidUsername {
            get {
                return ResourceManager.GetString("ManagePackageOwners_InvalidUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Are you sure you want to remove your organization as an owner of this package?.
        /// </summary>
        public static string ManagePackageOwners_RemovingOrganization {
            get {
                return ResourceManager.GetString("ManagePackageOwners_RemovingOrganization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You will no longer be able to manage the package if you do..
        /// </summary>
        public static string ManagePackageOwners_RemovingOwnership {
            get {
                return ResourceManager.GetString("ManagePackageOwners_RemovingOwnership", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Are you sure you want to remove yourself as an owner of this package?.
        /// </summary>
        public static string ManagePackageOwners_RemovingSelf {
            get {
                return ResourceManager.GetString("ManagePackageOwners_RemovingSelf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Your organization must be confirmed before you can change its membership..
        /// </summary>
        public static string Member_OrganizationUnconfirmed {
            get {
                return ResourceManager.GetString("Member_OrganizationUnconfirmed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Please enter a message..
        /// </summary>
        public static string MessageIsRequired {
            get {
                return ResourceManager.GetString("MessageIsRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cannot send added/removed email for credentials of type &apos;{0}&apos;.
        /// </summary>
        public static string MessageService_CannotSendEmailForCredential {
            get {
                return ResourceManager.GetString("MessageService_CannotSendEmailForCredential", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Microsoft account.
        /// </summary>
        public static string MicrosoftAccount_AccountNoun {
            get {
                return ResourceManager.GetString("MicrosoftAccount_AccountNoun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Sign in with Microsoft.
        /// </summary>
        public static string MicrosoftAccount_SignInMessage {
            get {
                return ResourceManager.GetString("MicrosoftAccount_SignInMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на {0} minutes.
        /// </summary>
        public static string Minutes {
            get {
                return ResourceManager.GetString("Minutes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Missing required configuration value: &apos;{0}&apos;.
        /// </summary>
        public static string MissingRequiredConfigurationValue {
            get {
                return ResourceManager.GetString("MissingRequiredConfigurationValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Two-factor authentication has been disabled for your account. Please close all sessions for Microsoft accounts before you log into {0} to prevent automatic enabling of this setting..
        /// </summary>
        public static string MultiFactorAuth_Disabled {
            get {
                return ResourceManager.GetString("MultiFactorAuth_Disabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Two-factor authentication is enabled for your account. It will be enforced the next time you log into {0}..
        /// </summary>
        public static string MultiFactorAuth_Enabled {
            get {
                return ResourceManager.GetString("MultiFactorAuth_Enabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на We noticed you used two-factor authentication for login. We have enabled your account to use two-factor authentication going forward..
        /// </summary>
        public static string MultiFactorAuth_LoginUpdate {
            get {
                return ResourceManager.GetString("MultiFactorAuth_LoginUpdate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Multiple Credentials match &apos;{0}&apos; credential with Key {1}.
        /// </summary>
        public static string MultipleMatchingCredentials {
            get {
                return ResourceManager.GetString("MultipleMatchingCredentials", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No.
        /// </summary>
        public static string No {
            get {
                return ResourceManager.GetString("No", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Full access API key.
        /// </summary>
        public static string NonScopedApiKeyDescription {
            get {
                return ResourceManager.GetString("NonScopedApiKeyDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A nuget package&apos;s {0} property is required..
        /// </summary>
        public static string NuGetPackagePropertyMissing {
            get {
                return ResourceManager.GetString("NuGetPackagePropertyMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A nuget package&apos;s {0} property may not be more than {1} characters long..
        /// </summary>
        public static string NuGetPackagePropertyTooLong {
            get {
                return ResourceManager.GetString("NuGetPackagePropertyTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на This OData endpoint has been disabled. Please refer to the following URL for more information about this deprecation: https://aka.ms/nuget/odata-deprecation.
        /// </summary>
        public static string ODataDisabled {
            get {
                return ResourceManager.GetString("ODataDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The combination of parameters provided to this OData endpoint is no longer supported. Please refer to the following URL for more information about this deprecation: https://aka.ms/nuget/odata-deprecation.
        /// </summary>
        public static string ODataParametersDisabled {
            get {
                return ResourceManager.GetString("ODataParametersDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You have successfully confirmed the organization email address..
        /// </summary>
        public static string OrganizationEmailConfirmed {
            get {
                return ResourceManager.GetString("OrganizationEmailConfirmed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The organization email preferences have been updated..
        /// </summary>
        public static string OrganizationEmailPreferencesUpdated {
            get {
                return ResourceManager.GetString("OrganizationEmailPreferencesUpdated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You canceled your organization email address change request..
        /// </summary>
        public static string OrganizationEmailUpdateCancelled {
            get {
                return ResourceManager.GetString("OrganizationEmailUpdateCancelled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Member name is required..
        /// </summary>
        public static string OrganizationMemberNameIsRequired {
            get {
                return ResourceManager.GetString("OrganizationMemberNameIsRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Administrator account &apos;{0}&apos; is not linked to an AAD credential with an organization tenant..
        /// </summary>
        public static string Organizations_AdminAccountDoesNotHaveTenant {
            get {
                return ResourceManager.GetString("Organizations_AdminAccountDoesNotHaveTenant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Account &apos;{0}&apos; does not support organizations..
        /// </summary>
        public static string Organizations_NotSupportedForAccount {
            get {
                return ResourceManager.GetString("Organizations_NotSupportedForAccount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Organization accounts cannot create credentials..
        /// </summary>
        public static string OrganizationsCannotCreateCredentials {
            get {
                return ResourceManager.GetString("OrganizationsCannotCreateCredentials", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Owner Support Request for &apos;{0}&apos; version {1}.
        /// </summary>
        public static string OwnerSupportRequestSubjectFormat {
            get {
                return ResourceManager.GetString("OwnerSupportRequestSubjectFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Package created from API..
        /// </summary>
        public static string PackageCreatedFromApi {
            get {
                return ResourceManager.GetString("PackageCreatedFromApi", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The package is invalid and cannot be uploaded. One or more files, such as &apos;{0}&apos; have a date in the future..
        /// </summary>
        public static string PackageEntryFromTheFuture {
            get {
                return ResourceManager.GetString("PackageEntryFromTheFuture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A package with ID &apos;{0}&apos; and version &apos;{1}&apos; already exists and cannot be modified..
        /// </summary>
        public static string PackageExistsAndCannotBeModified {
            get {
                return ResourceManager.GetString("PackageExistsAndCannotBeModified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The package file exceeds the size limit. Please try again..
        /// </summary>
        public static string PackageFileTooLarge {
            get {
                return ResourceManager.GetString("PackageFileTooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The package ID &apos;{0}&apos; is not available..
        /// </summary>
        public static string PackageIdNotAvailable {
            get {
                return ResourceManager.GetString("PackageIdNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Package &apos;{0}&apos; has been locked. This means you cannot publish a new version or change the listing status of a published package version. Please contact support@nuget.org..
        /// </summary>
        public static string PackageIsLocked {
            get {
                return ResourceManager.GetString("PackageIsLocked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на There are no packages with ID &apos;{0}&apos;..
        /// </summary>
        public static string PackagesWithIdNotFound {
            get {
                return ResourceManager.GetString("PackagesWithIdNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The package upload failed due to the client disconnecting..
        /// </summary>
        public static string PackageUploadCancelled {
            get {
                return ResourceManager.GetString("PackageUploadCancelled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Package versions that differ only by metadata cannot be uploaded. A package with ID &apos;{0}&apos; and version &apos;{1}&apos; already exists and cannot be modified..
        /// </summary>
        public static string PackageVersionDiffersOnlyByMetadataAndCannotBeModified {
            get {
                return ResourceManager.GetString("PackageVersionDiffersOnlyByMetadataAndCannotBeModified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A package with ID &apos;{0}&apos; and version &apos;{1}&apos; does not exist..
        /// </summary>
        public static string PackageWithIdAndVersionNotFound {
            get {
                return ResourceManager.GetString("PackageWithIdAndVersionNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No package with this ID exists..
        /// </summary>
        public static string PackageWithIdDoesNotExist {
            get {
                return ResourceManager.GetString("PackageWithIdDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{0}&apos; cannot be null or an empty string.
        /// </summary>
        public static string ParameterCannotBeNullOrEmpty {
            get {
                return ResourceManager.GetString("ParameterCannotBeNullOrEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Your password has been changed..
        /// </summary>
        public static string PasswordChanged {
            get {
                return ResourceManager.GetString("PasswordChanged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Password credentials cannot be used with Authenticate(Credential). Use Authenticate(string, string) instead..
        /// </summary>
        public static string PasswordCredentialsCannotBeUsedHere {
            get {
                return ResourceManager.GetString("PasswordCredentialsCannotBeUsedHere", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The new password does not match the verify password field..
        /// </summary>
        public static string PasswordDoesNotMatch {
            get {
                return ResourceManager.GetString("PasswordDoesNotMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The password login is deprecated. You must use Microsoft account to sign in..
        /// </summary>
        public static string PasswordLoginDeprecated {
            get {
                return ResourceManager.GetString("PasswordLoginDeprecated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Your password has been removed..
        /// </summary>
        public static string PasswordRemoved {
            get {
                return ResourceManager.GetString("PasswordRemoved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Your password has been set..
        /// </summary>
        public static string PasswordSet {
            get {
                return ResourceManager.GetString("PasswordSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Conversion of Markdown to HTML failed with &apos;{0}&apos;..
        /// </summary>
        public static string PreviewReadMe_ConversionFailed {
            get {
                return ResourceManager.GetString("PreviewReadMe_ConversionFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на There is no Markdown Documentation available to preview..
        /// </summary>
        public static string PreviewReadMe_ReadMeMissing {
            get {
                return ResourceManager.GetString("PreviewReadMe_ReadMeMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The readme file &apos;{0}&apos; cannot be empty..
        /// </summary>
        public static string ReadmeErrorEmpty {
            get {
                return ResourceManager.GetString("ReadmeErrorEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{0}&apos; is not a valid Markdown Documentation source type..
        /// </summary>
        public static string ReadMeInvalidSourceType {
            get {
                return ResourceManager.GetString("ReadMeInvalidSourceType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The Markdown Documentation file must be less than {0} bytes..
        /// </summary>
        public static string ReadMeMaxLengthExceeded {
            get {
                return ResourceManager.GetString("ReadMeMaxLengthExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The readme is not editable with the package has the embedded readme.
        /// </summary>
        public static string ReadmeNotEditableWithEmbeddedReadme {
            get {
                return ResourceManager.GetString("ReadmeNotEditableWithEmbeddedReadme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The Documentation file must end with a Markdown extension &apos;{0}&apos;..
        /// </summary>
        public static string ReadMePostedFileExtensionInvalid {
            get {
                return ResourceManager.GetString("ReadMePostedFileExtensionInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The Documentation URL must be a raw Markdown file hosted on GitHub..
        /// </summary>
        public static string ReadMeUrlHostInvalid {
            get {
                return ResourceManager.GetString("ReadMeUrlHostInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на There is no request for user &apos;{0}&apos; for join this organization with that token..
        /// </summary>
        public static string RejectMembershipRequest_NotFound {
            get {
                return ResourceManager.GetString("RejectMembershipRequest_NotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The user &apos;{0}&apos; does not have permission to remove the owner &apos;{1}&apos;..
        /// </summary>
        public static string RemoveOwner_NotAllowed {
            get {
                return ResourceManager.GetString("RemoveOwner_NotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The user &apos;{0}&apos; is not an owner or pending owner of the package..
        /// </summary>
        public static string RemoveOwner_NotOwner {
            get {
                return ResourceManager.GetString("RemoveOwner_NotOwner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на At least one package owner has no certificate while at least one other package owner has at least one certificate, which means future package submissions may be unsigned or signed with any certificate registered to any owner..
        /// </summary>
        public static string RequiredSigner_AnyWithMixedResult {
            get {
                return ResourceManager.GetString("RequiredSigner_AnyWithMixedResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на All package owners have at least one certificate, which means future package submissions must be signed..
        /// </summary>
        public static string RequiredSigner_AnyWithSignedResult {
            get {
                return ResourceManager.GetString("RequiredSigner_AnyWithSignedResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на All package owners have at least one certificate, which means future package submissions must be signed..
        /// </summary>
        public static string RequiredSigner_AnyWithUnsignedResult {
            get {
                return ResourceManager.GetString("RequiredSigner_AnyWithUnsignedResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Are you sure you want to change the required signer for this package?.
        /// </summary>
        public static string RequiredSigner_Confirm {
            get {
                return ResourceManager.GetString("RequiredSigner_Confirm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{0}&apos; currently has at least one certificate, which means future package submissions must be signed..
        /// </summary>
        public static string RequiredSigner_OwnerHasAtLeastOneCertificate {
            get {
                return ResourceManager.GetString("RequiredSigner_OwnerHasAtLeastOneCertificate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{0}&apos; currently has no certificate, which means future package submissions must be unsigned..
        /// </summary>
        public static string RequiredSigner_OwnerHasNoCertificate {
            get {
                return ResourceManager.GetString("RequiredSigner_OwnerHasNoCertificate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на This action will change the required signer to &apos;{0}&apos; for all future submissions for this package..
        /// </summary>
        public static string RequiredSigner_ThisAction {
            get {
                return ResourceManager.GetString("RequiredSigner_ThisAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The namespace &apos;{0}&apos; contains invalid characters. Examples of valid namespaces include &apos;MyNamespace&apos;, &apos;MyNamespace.&apos; or &apos;MyNamespace-&apos; etc..
        /// </summary>
        public static string ReservedNamespace_InvalidCharactersInNamespace {
            get {
                return ResourceManager.GetString("ReservedNamespace_InvalidCharactersInNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Invalid namespace specified.
        /// </summary>
        public static string ReservedNamespace_InvalidNamespace {
            get {
                return ResourceManager.GetString("ReservedNamespace_InvalidNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Invalid or null username specified..
        /// </summary>
        public static string ReservedNamespace_InvalidUsername {
            get {
                return ResourceManager.GetString("ReservedNamespace_InvalidUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Namespace must not exceed {0} characters..
        /// </summary>
        public static string ReservedNamespace_NamespaceExceedsLength {
            get {
                return ResourceManager.GetString("ReservedNamespace_NamespaceExceedsLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The specified namespace is already reserved or is a more liberal namespace..
        /// </summary>
        public static string ReservedNamespace_NamespaceNotAvailable {
            get {
                return ResourceManager.GetString("ReservedNamespace_NamespaceNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Namespace &apos;{0}&apos; not found..
        /// </summary>
        public static string ReservedNamespace_NamespaceNotFound {
            get {
                return ResourceManager.GetString("ReservedNamespace_NamespaceNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The user &apos;{0}&apos; is now an owner of the prefix &apos;{1}&apos;..
        /// </summary>
        public static string ReservedNamespace_OwnerAdded {
            get {
                return ResourceManager.GetString("ReservedNamespace_OwnerAdded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The user &apos;{0}&apos; was removed from owners list of prefix &apos;{1}&apos;..
        /// </summary>
        public static string ReservedNamespace_OwnerRemoved {
            get {
                return ResourceManager.GetString("ReservedNamespace_OwnerRemoved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The prefix &apos;{0}&apos; has been reserved..
        /// </summary>
        public static string ReservedNamespace_PrefixAdded {
            get {
                return ResourceManager.GetString("ReservedNamespace_PrefixAdded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The prefix &apos;{0}&apos; has been deleted..
        /// </summary>
        public static string ReservedNamespace_PrefixRemoved {
            get {
                return ResourceManager.GetString("ReservedNamespace_PrefixRemoved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The package registraton Id &apos;{0}&apos; is missing or not found in the reserved namespace &apos;{1}&apos;..
        /// </summary>
        public static string ReservedNamespace_RegistrationNotFound {
            get {
                return ResourceManager.GetString("ReservedNamespace_RegistrationNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The ID prefix of this package has been reserved for one of the owners of this package by NuGet.org..
        /// </summary>
        public static string ReservedNamespace_ReservedIndicatorTooltip {
            get {
                return ResourceManager.GetString("ReservedNamespace_ReservedIndicatorTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The user &apos;{0}&apos; is already an owner of the specified namespace..
        /// </summary>
        public static string ReservedNamespace_UserAlreadyOwner {
            get {
                return ResourceManager.GetString("ReservedNamespace_UserAlreadyOwner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на User &apos;{0}&apos; is not an owner of the specified namespace.
        /// </summary>
        public static string ReservedNamespace_UserNotAnOwner {
            get {
                return ResourceManager.GetString("ReservedNamespace_UserNotAnOwner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на User not found with username &apos;{0}&apos;.
        /// </summary>
        public static string ReservedNamespace_UserNotFound {
            get {
                return ResourceManager.GetString("ReservedNamespace_UserNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на All.
        /// </summary>
        public static string ScopeDescription_All {
            get {
                return ResourceManager.GetString("ScopeDescription_All", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Push new packages and package versions.
        /// </summary>
        public static string ScopeDescription_PushPackage {
            get {
                return ResourceManager.GetString("ScopeDescription_PushPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Push only new package versions.
        /// </summary>
        public static string ScopeDescription_PushPackageVersion {
            get {
                return ResourceManager.GetString("ScopeDescription_PushPackageVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unknown.
        /// </summary>
        public static string ScopeDescription_Unknown {
            get {
                return ResourceManager.GetString("ScopeDescription_Unknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unlist package.
        /// </summary>
        public static string ScopeDescription_UnlistPackage {
            get {
                return ResourceManager.GetString("ScopeDescription_UnlistPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Verify package ownership.
        /// </summary>
        public static string ScopeDescription_VerifyPackage {
            get {
                return ResourceManager.GetString("ScopeDescription_VerifyPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Search Service is not available. Please try again later..
        /// </summary>
        public static string SearchServiceIsNotAvailable {
            get {
                return ResourceManager.GetString("SearchServiceIsNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The package metadata contains a non-compliant copyright element..
        /// </summary>
        public static string SecurityPolicy_CopyrightNotCompliant {
            get {
                return ResourceManager.GetString("SecurityPolicy_CopyrightNotCompliant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The package metadata defines &apos;{0}&apos; as author more than once, which is not allowed by policy..
        /// </summary>
        public static string SecurityPolicy_PackageAuthorDuplicatesNotAllowed {
            get {
                return ResourceManager.GetString("SecurityPolicy_PackageAuthorDuplicatesNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The package metadata defines &apos;{0}&apos; as one of the authors which is not allowed by policy..
        /// </summary>
        public static string SecurityPolicy_PackageAuthorNotAllowed {
            get {
                return ResourceManager.GetString("SecurityPolicy_PackageAuthorNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A package verification key is required to push symbols. Please contact support@nuget.org to get more details..
        /// </summary>
        public static string SecurityPolicy_RequireApiKeyWithPackageVerifyScope {
            get {
                return ResourceManager.GetString("SecurityPolicy_RequireApiKeyWithPackageVerifyScope", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The package metadata is missing required author &apos;{0}&apos;..
        /// </summary>
        public static string SecurityPolicy_RequiredAuthorMissing {
            get {
                return ResourceManager.GetString("SecurityPolicy_RequiredAuthorMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The package metadata is missing required LicenseUrl..
        /// </summary>
        public static string SecurityPolicy_RequiredLicenseUrlMissing {
            get {
                return ResourceManager.GetString("SecurityPolicy_RequiredLicenseUrlMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The package metadata is missing required ProjectUrl..
        /// </summary>
        public static string SecurityPolicy_RequiredProjectUrlMissing {
            get {
                return ResourceManager.GetString("SecurityPolicy_RequiredProjectUrlMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The package is not compliant with metadata requirements for Microsoft packages on NuGet.org. Go to https://aka.ms/Microsoft-NuGet-Compliance for more information.
        ///Policy violations: {0}.
        /// </summary>
        public static string SecurityPolicy_RequireMicrosoftPackageMetadataComplianceForPush {
            get {
                return ResourceManager.GetString("SecurityPolicy_RequireMicrosoftPackageMetadataComplianceForPush", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A client version &apos;{0}&apos; or higher is required to be able to push packages. Please contact support@nuget.org to get more details..
        /// </summary>
        public static string SecurityPolicy_RequireMinProtocolVersionForPush {
            get {
                return ResourceManager.GetString("SecurityPolicy_RequireMinProtocolVersionForPush", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You have not published a package with this prefix in the past. This means other users may be able to push packages starting with the same prefix. Contact account@nuget.org to reserve the prefix. Go to https://docs.microsoft.com/en-us/nuget/reference/id-prefix-reservation to learn more about Package ID prefix reservation..
        /// </summary>
        public static string SecurityPolicy_RequirePackagePrefixReserved {
            get {
                return ResourceManager.GetString("SecurityPolicy_RequirePackagePrefixReserved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The email address you provided does not match with the email address linked to the account.
        /// </summary>
        public static string SigninAssistance_EmailMismatched {
            get {
                return ResourceManager.GetString("SigninAssistance_EmailMismatched", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Please enter a valid email address.
        /// </summary>
        public static string SigninAssistance_InvalidEmail {
            get {
                return ResourceManager.GetString("SigninAssistance_InvalidEmail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Please enter a valid username.
        /// </summary>
        public static string SigninAssistance_InvalidUser {
            get {
                return ResourceManager.GetString("SigninAssistance_InvalidUser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The site admins are required to sign in with the &apos;{0}&apos; tenant only..
        /// </summary>
        public static string SiteAdminNotLoggedInWithRequiredTenant {
            get {
                return ResourceManager.GetString("SiteAdminNotLoggedInWithRequiredTenant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The requested resource can only be accessed via SSL..
        /// </summary>
        public static string SSLRequired {
            get {
                return ResourceManager.GetString("SSLRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You successfully uploaded {0} {1}..
        /// </summary>
        public static string SuccessfullyUploadedPackage {
            get {
                return ResourceManager.GetString("SuccessfullyUploadedPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Your support request has been sent to the gallery operators..
        /// </summary>
        public static string SupportRequestSentTransientMessage {
            get {
                return ResourceManager.GetString("SupportRequestSentTransientMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на It looks like there is another copy of this symbols package pending validation(s). Please wait for the validation(s) to finish before trying to replace the symbols package..
        /// </summary>
        public static string SymbolsPackage_ConflictValidating {
            get {
                return ResourceManager.GetString("SymbolsPackage_ConflictValidating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The symbols package associated with this package has been deleted..
        /// </summary>
        public static string SymbolsPackage_Deleted {
            get {
                return ResourceManager.GetString("SymbolsPackage_Deleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Failed to read the symbols package. Ensure it is a valid symbols package (.snupkg)..
        /// </summary>
        public static string SymbolsPackage_FailedToReadPackage {
            get {
                return ResourceManager.GetString("SymbolsPackage_FailedToReadPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Invalid metadata items specified in nuspec. Please remove &apos;{0}&apos; from the nuspec..
        /// </summary>
        public static string SymbolsPackage_InvalidDataInNuspec {
            get {
                return ResourceManager.GetString("SymbolsPackage_InvalidDataInNuspec", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Invalid file found in the uploaded package. Symbols packages should only contain &apos;{0}&apos; files..
        /// </summary>
        public static string SymbolsPackage_InvalidFiles {
            get {
                return ResourceManager.GetString("SymbolsPackage_InvalidFiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The package does not contain any symbol (.pdb) files..
        /// </summary>
        public static string SymbolsPackage_NoSymbols {
            get {
                return ResourceManager.GetString("SymbolsPackage_NoSymbols", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The uploaded package is not a valid symbols package. The required &apos;SymbolsPackage&apos; package type is missing..
        /// </summary>
        public static string SymbolsPackage_NotSymbolPackage {
            get {
                return ResourceManager.GetString("SymbolsPackage_NotSymbolPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A package with ID &apos;{0}&apos; and version &apos;{1}&apos; does not exist. Please upload the package before uploading its symbols..
        /// </summary>
        public static string SymbolsPackage_PackageIdAndVersionNotFound {
            get {
                return ResourceManager.GetString("SymbolsPackage_PackageIdAndVersionNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No available symbols package found for ID {0} and version {1}..
        /// </summary>
        public static string SymbolsPackage_PackageNotAvailable {
            get {
                return ResourceManager.GetString("SymbolsPackage_PackageNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The latest associated symbols package for package with ID {0} and version {1} is deleted. Cannot revalidate a deleted symbols package..
        /// </summary>
        public static string SymbolsPackage_RevalidateDeletedPackage {
            get {
                return ResourceManager.GetString("SymbolsPackage_RevalidateDeletedPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You do not have the permissions to upload symbol packages..
        /// </summary>
        public static string SymbolsPackage_UploadNotAllowed {
            get {
                return ResourceManager.GetString("SymbolsPackage_UploadNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Successfully uploaded the symbols package for package with ID {0} and version {1}..
        /// </summary>
        public static string SymbolsPackage_UploadSuccessful {
            get {
                return ResourceManager.GetString("SymbolsPackage_UploadSuccessful", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The title of your package, &apos;{0}&apos;, is similar to the ID of an existing package, which can cause confusion with our users. Please modify the title of your package and try uploading again..
        /// </summary>
        public static string TitleMatchesExistingRegistration {
            get {
                return ResourceManager.GetString("TitleMatchesExistingRegistration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Token expiration should give the user at least a minute to change their password.
        /// </summary>
        public static string TokenExpirationShouldGiveUser1MinuteToChangePassword {
            get {
                return ResourceManager.GetString("TokenExpirationShouldGiveUser1MinuteToChangePassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You are a member of one or more organizations. You must leave all organizations before transforming your account..
        /// </summary>
        public static string TransformAccount_AccountHasMemberships {
            get {
                return ResourceManager.GetString("TransformAccount_AccountHasMemberships", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Account &apos;{0}&apos; is already an organization..
        /// </summary>
        public static string TransformAccount_AccountIsAnOrganization {
            get {
                return ResourceManager.GetString("TransformAccount_AccountIsAnOrganization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Account &apos;{0}&apos; should be a confirmed user..
        /// </summary>
        public static string TransformAccount_AccountNotConfirmed {
            get {
                return ResourceManager.GetString("TransformAccount_AccountNotConfirmed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Administrator account &apos;{0}&apos; does not exist..
        /// </summary>
        public static string TransformAccount_AdminAccountDoesNotExist {
            get {
                return ResourceManager.GetString("TransformAccount_AdminAccountDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Administrator account &apos;{0}&apos; cannot be an organization..
        /// </summary>
        public static string TransformAccount_AdminAccountIsOrganization {
            get {
                return ResourceManager.GetString("TransformAccount_AdminAccountIsOrganization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Administrator account &apos;{0}&apos; has not confirmed their email address..
        /// </summary>
        public static string TransformAccount_AdminAccountNotConfirmed {
            get {
                return ResourceManager.GetString("TransformAccount_AdminAccountNotConfirmed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Administrator account &apos;{0}&apos; cannot be the same account as the one being transformed..
        /// </summary>
        public static string TransformAccount_AdminMustBeDifferentAccount {
            get {
                return ResourceManager.GetString("TransformAccount_AdminMustBeDifferentAccount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You must choose an administrator by username, not an email address..
        /// </summary>
        public static string TransformAccount_AdminNameIsEmail {
            get {
                return ResourceManager.GetString("TransformAccount_AdminNameIsEmail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The transform request for your account has been successfully cancelled..
        /// </summary>
        public static string TransformAccount_Cancelled {
            get {
                return ResourceManager.GetString("TransformAccount_Cancelled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на An unexpected error occurred while transforming this account. Contact support for assistance..
        /// </summary>
        public static string TransformAccount_Failed {
            get {
                return ResourceManager.GetString("TransformAccount_Failed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The transform request you are attempting to cancel was not found..
        /// </summary>
        public static string TransformAccount_FailedMissingRequestToCancel {
            get {
                return ResourceManager.GetString("TransformAccount_FailedMissingRequestToCancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Organization account &apos;{0}&apos; does not exist..
        /// </summary>
        public static string TransformAccount_OrganizationAccountDoesNotExist {
            get {
                return ResourceManager.GetString("TransformAccount_OrganizationAccountDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The transform request for you to become an admin of &apos;{0}&apos; has been successfully cancelled..
        /// </summary>
        public static string TransformAccount_Rejected {
            get {
                return ResourceManager.GetString("TransformAccount_Rejected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A transform request, with account &apos;{0}&apos; as administrator, is in progress. A new request will override any existing request(s)..
        /// </summary>
        public static string TransformAccount_RequestExists {
            get {
                return ResourceManager.GetString("TransformAccount_RequestExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Please sign in as administrator &apos;{0}&apos; to finish transforming account &apos;{1}&apos; into an organization..
        /// </summary>
        public static string TransformAccount_SignInToConfirm {
            get {
                return ResourceManager.GetString("TransformAccount_SignInToConfirm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Account &apos;{0}&apos; was successfully transformed into an organization..
        /// </summary>
        public static string TransformAccount_Success {
            get {
                return ResourceManager.GetString("TransformAccount_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на There was an unexpected error when submitting feedback. Please contact NuGet support..
        /// </summary>
        public static string TwoFAFeedback_Error {
            get {
                return ResourceManager.GetString("TwoFAFeedback_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The uploaded package&apos;s id is too similar to the already existing packages: {0} .
        /// </summary>
        public static string TyposquattingCheckFails {
            get {
                return ResourceManager.GetString("TyposquattingCheckFails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на User is not authorized.
        /// </summary>
        public static string Unauthorized {
            get {
                return ResourceManager.GetString("Unauthorized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unknown authentication provider: &apos;{0}&apos;.
        /// </summary>
        public static string UnknownAuthenticationProvider {
            get {
                return ResourceManager.GetString("UnknownAuthenticationProvider", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unsupported.
        /// </summary>
        public static string Unsupported {
            get {
                return ResourceManager.GetString("Unsupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You can&apos;t change your role to collaborator. In order to change, another collaborator must be assigned as an administrator..
        /// </summary>
        public static string UpdateMember_CannotRemoveLastAdmin {
            get {
                return ResourceManager.GetString("UpdateMember_CannotRemoveLastAdmin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Organization member &apos;{0}&apos; was not found..
        /// </summary>
        public static string UpdateOrDeleteMember_MemberNotFound {
            get {
                return ResourceManager.GetString("UpdateOrDeleteMember_MemberNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A package file is required..
        /// </summary>
        public static string UploadFileIsRequired {
            get {
                return ResourceManager.GetString("UploadFileIsRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The file must be a .nupkg or .snupkg file..
        /// </summary>
        public static string UploadFileMustBeNuGetPackage {
            get {
                return ResourceManager.GetString("UploadFileMustBeNuGetPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The package file is corrupt..
        /// </summary>
        public static string UploadPackage_CorruptNupkg {
            get {
                return ResourceManager.GetString("UploadPackage_CorruptNupkg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The &lt;licenseUrl&gt; element is deprecated. Consider using the &lt;license&gt; element instead..
        /// </summary>
        public static string UploadPackage_DeprecatingLicenseUrl {
            get {
                return ResourceManager.GetString("UploadPackage_DeprecatingLicenseUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на To provide a better experience for older clients when a license expression is specified, &lt;licenseUrl&gt; must be set to &apos;{0}&apos;..
        /// </summary>
        public static string UploadPackage_DeprecationUrlRequiredForLicenseExpressions {
            get {
                return ResourceManager.GetString("UploadPackage_DeprecationUrlRequiredForLicenseExpressions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на To provide a better experience for older clients when a license file is packaged, &lt;licenseUrl&gt; must be set to &apos;{0}&apos;..
        /// </summary>
        public static string UploadPackage_DeprecationUrlRequiredForLicenseFiles {
            get {
                return ResourceManager.GetString("UploadPackage_DeprecationUrlRequiredForLicenseFiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The license deprecation URL must be used in conjunction with specifying the license in the package..
        /// </summary>
        public static string UploadPackage_DeprecationUrlUsage {
            get {
                return ResourceManager.GetString("UploadPackage_DeprecationUrlUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The &lt;icon&gt; element is not currently supported..
        /// </summary>
        public static string UploadPackage_EmbeddedIconNotAccepted {
            get {
                return ResourceManager.GetString("UploadPackage_EmbeddedIconNotAccepted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The &lt;readme&gt; element is not currently supported..
        /// </summary>
        public static string UploadPackage_EmbeddedReadmeNotAccepted {
            get {
                return ResourceManager.GetString("UploadPackage_EmbeddedReadmeNotAccepted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The {0} file &apos;{1}&apos; does not exist in the package..
        /// </summary>
        public static string UploadPackage_FileDoesNotExist {
            get {
                return ResourceManager.GetString("UploadPackage_FileDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The {0} file cannot be larger than {1}..
        /// </summary>
        public static string UploadPackage_FileTooLong {
            get {
                return ResourceManager.GetString("UploadPackage_FileTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на icon.
        /// </summary>
        public static string UploadPackage_IconFileType {
            get {
                return ResourceManager.GetString("UploadPackage_IconFileType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The &lt;iconUrl&gt; element is deprecated. Consider using the &lt;icon&gt; element instead..
        /// </summary>
        public static string UploadPackage_IconUrlDeprecated {
            get {
                return ResourceManager.GetString("UploadPackage_IconUrlDeprecated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на This package ID has been reserved. Please request access to upload to this reserved namespace from the owner of the reserved prefix, or re-upload the package with a different ID. Go to https://docs.microsoft.com/en-us/nuget/reference/id-prefix-reservation learn more about Package ID prefix reservation..
        /// </summary>
        public static string UploadPackage_IdNamespaceConflict {
            get {
                return ResourceManager.GetString("UploadPackage_IdNamespaceConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на This package ID has been reserved. Please request access to upload to this reserved namespace from the owner of the reserved prefix, or re-upload the package with a different ID. &lt;a href=&quot;https://docs.microsoft.com/en-us/nuget/reference/id-prefix-reservation&quot;&gt;Learn more about Package ID prefix reservation&lt;/a&gt;..
        /// </summary>
        public static string UploadPackage_IdNamespaceConflictHtml {
            get {
                return ResourceManager.GetString("UploadPackage_IdNamespaceConflictHtml", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на There is a conflict with the ID and version of your package and another package. Please change your package&apos;s ID or version and try again..
        /// </summary>
        public static string UploadPackage_IdVersionConflict {
            get {
                return ResourceManager.GetString("UploadPackage_IdVersionConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The icon file has an invalid extension &apos;{0}&apos;. Extension must be one of the following: {1}..
        /// </summary>
        public static string UploadPackage_InvalidIconFileExtension {
            get {
                return ResourceManager.GetString("UploadPackage_InvalidIconFileExtension", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The license file has an invalid extension &apos;{0}&apos;. Extension must be either empty or one of the following: {1}..
        /// </summary>
        public static string UploadPackage_InvalidLicenseFileExtension {
            get {
                return ResourceManager.GetString("UploadPackage_InvalidLicenseFileExtension", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Invalid license metadata: {0}.
        /// </summary>
        public static string UploadPackage_InvalidLicenseMetadata {
            get {
                return ResourceManager.GetString("UploadPackage_InvalidLicenseMetadata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The NuGet package contains an invalid .nuspec file. The error encountered was: &apos;{0}&apos;. Correct the error and try again..
        /// </summary>
        public static string UploadPackage_InvalidNuspec {
            get {
                return ResourceManager.GetString("UploadPackage_InvalidNuspec", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The NuGet package contains an invalid .nuspec file. The errors encountered were: &apos;{0}&apos;. Correct the errors and try again..
        /// </summary>
        public static string UploadPackage_InvalidNuspecMultiple {
            get {
                return ResourceManager.GetString("UploadPackage_InvalidNuspecMultiple", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The NuGet package is invalid. The error encountered was:&apos;{0}&apos;. Correct the error and try again..
        /// </summary>
        public static string UploadPackage_InvalidPackage {
            get {
                return ResourceManager.GetString("UploadPackage_InvalidPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The readme file has an invalid extension &apos;{0}&apos;. The extension must be: &apos;{1}&apos;..
        /// </summary>
        public static string UploadPackage_InvalidReadmeFileExtension {
            get {
                return ResourceManager.GetString("UploadPackage_InvalidReadmeFileExtension", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на the name of &lt;readme&gt; element is case sensitive, must use the &lt;readme&gt;.
        /// </summary>
        public static string UploadPackage_InvalidReadmeName {
            get {
                return ResourceManager.GetString("UploadPackage_InvalidReadmeName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Learn more about including a license within the package.
        /// </summary>
        public static string UploadPackage_LearMore_PackagingLicense {
            get {
                return ResourceManager.GetString("UploadPackage_LearMore_PackagingLicense", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Learn more.
        /// </summary>
        public static string UploadPackage_LearnMore {
            get {
                return ResourceManager.GetString("UploadPackage_LearnMore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Learn more about icon URL deprecation.
        /// </summary>
        public static string UploadPackage_LearnMore_IconUrlDeprecation {
            get {
                return ResourceManager.GetString("UploadPackage_LearnMore_IconUrlDeprecation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Learn more about invalid license URL encoding.
        /// </summary>
        public static string UploadPackage_LearnMore_InvalidLicenseUrlEncoding {
            get {
                return ResourceManager.GetString("UploadPackage_LearnMore_InvalidLicenseUrlEncoding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Learn more about license URL deprecation.
        /// </summary>
        public static string UploadPackage_LearnMore_LicenseUrlDreprecation {
            get {
                return ResourceManager.GetString("UploadPackage_LearnMore_LicenseUrlDreprecation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Specifying &lt;licenseUrl&gt; in the package metadata is no longer allowed, please specify the license in the package..
        /// </summary>
        public static string UploadPackage_LegacyLicenseUrlNotAllowed {
            get {
                return ResourceManager.GetString("UploadPackage_LegacyLicenseUrlNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на license.
        /// </summary>
        public static string UploadPackage_LicenseFileType {
            get {
                return ResourceManager.GetString("UploadPackage_LicenseFileType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The license file must be plain text using UTF-8 encoding..
        /// </summary>
        public static string UploadPackage_LicenseMustBePlainText {
            get {
                return ResourceManager.GetString("UploadPackage_LicenseMustBePlainText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The license node value must be shorter than 500 characters..
        /// </summary>
        public static string UploadPackage_LicenseNodeValueTooLong {
            get {
                return ResourceManager.GetString("UploadPackage_LicenseNodeValueTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на All published packages should have license information specified..
        /// </summary>
        public static string UploadPackage_LicenseShouldBeSpecified {
            get {
                return ResourceManager.GetString("UploadPackage_LicenseShouldBeSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The package contains a malformed license URL..
        /// </summary>
        public static string UploadPackage_MalformedLicenseUrl {
            get {
                return ResourceManager.GetString("UploadPackage_MalformedLicenseUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на This package requires version &apos;{0}&apos; of NuGet, which this gallery does not currently support. Please contact us if you have questions..
        /// </summary>
        public static string UploadPackage_MinClientVersionOutOfRange {
            get {
                return ResourceManager.GetString("UploadPackage_MinClientVersionOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The package has no license information specified..
        /// </summary>
        public static string UploadPackage_MissingLicenseInformation {
            get {
                return ResourceManager.GetString("UploadPackage_MissingLicenseInformation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на User &apos;{0}&apos; does not have the rights to upload a package with a new ID on behalf of user &apos;{1}&apos;..
        /// </summary>
        public static string UploadPackage_NewIdOnBehalfOfUserNotAllowed {
            get {
                return ResourceManager.GetString("UploadPackage_NewIdOnBehalfOfUserNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на User &apos;{0}&apos; does not have the rights to upload a new version of an existing package on behalf of user &apos;{1}&apos;..
        /// </summary>
        public static string UploadPackage_NewVersionOnBehalfOfUserNotAllowed {
            get {
                return ResourceManager.GetString("UploadPackage_NewVersionOnBehalfOfUserNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The {0} node cannot contain child nodes..
        /// </summary>
        public static string UploadPackage_NodeContainsChildren {
            get {
                return ResourceManager.GetString("UploadPackage_NodeContainsChildren", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на License expression must only contain licenses that are approved by Open Source Initiative or Free Software Foundation. Unsupported licenses: {0}..
        /// </summary>
        public static string UploadPackage_NonFsfOrOsiLicense {
            get {
                return ResourceManager.GetString("UploadPackage_NonFsfOrOsiLicense", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на This package contains a &lt;license&gt; metadata which is currently not supported..
        /// </summary>
        public static string UploadPackage_NotAcceptingPackagesWithLicense {
            get {
                return ResourceManager.GetString("UploadPackage_NotAcceptingPackagesWithLicense", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The package ID is reserved. You can upload your package with a different package ID. Reach out to support@nuget.org if you have questions..
        /// </summary>
        public static string UploadPackage_OwnerlessIdNamespaceConflict {
            get {
                return ResourceManager.GetString("UploadPackage_OwnerlessIdNamespaceConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The package ID is reserved. You can upload your package with a different package ID. Reach out to &lt;a href=&quot;mailto:support@nuget.org&quot;&gt;support@nuget.org&lt;/a&gt; if you have questions..
        /// </summary>
        public static string UploadPackage_OwnerlessIdNamespaceConflictHtml {
            get {
                return ResourceManager.GetString("UploadPackage_OwnerlessIdNamespaceConflictHtml", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The package contains one or more duplicated files in the same folder..
        /// </summary>
        public static string UploadPackage_PackageContainsDuplicatedEntries {
            get {
                return ResourceManager.GetString("UploadPackage_PackageContainsDuplicatedEntries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The package contains too many files and/or folders..
        /// </summary>
        public static string UploadPackage_PackageContainsTooManyEntries {
            get {
                return ResourceManager.GetString("UploadPackage_PackageContainsTooManyEntries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на This package must be signed with a registered certificate..
        /// </summary>
        public static string UploadPackage_PackageIsNotSigned {
            get {
                return ResourceManager.GetString("UploadPackage_PackageIsNotSigned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The package was signed. You must register the signing certificate to publish signed packages..
        /// </summary>
        public static string UploadPackage_PackageIsSignedButMissingCertificate_CurrentUserCanManageCertificates {
            get {
                return ResourceManager.GetString("UploadPackage_PackageIsSignedButMissingCertificate_CurrentUserCanManageCertificat" +
                        "es", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You can manage your certificates on the Account Settings page..
        /// </summary>
        public static string UploadPackage_PackageIsSignedButMissingCertificate_ManageCertificate {
            get {
                return ResourceManager.GetString("UploadPackage_PackageIsSignedButMissingCertificate_ManageCertificate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The package was signed. The owner &apos;{0}&apos; must register the signing certificate to publish signed packages..
        /// </summary>
        public static string UploadPackage_PackageIsSignedButMissingCertificate_RequiredSigner {
            get {
                return ResourceManager.GetString("UploadPackage_PackageIsSignedButMissingCertificate_RequiredSigner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на readme.
        /// </summary>
        public static string UploadPackage_ReadmeFileType {
            get {
                return ResourceManager.GetString("UploadPackage_ReadmeFileType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The readme file must be plain text using UTF-8 encoding..
        /// </summary>
        public static string UploadPackage_ReadmeMustBePlainText {
            get {
                return ResourceManager.GetString("UploadPackage_ReadmeMustBePlainText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The previous package version &apos;{0}&apos; is author signed but the uploaded package is unsigned. To avoid this warning, sign the package before uploading..
        /// </summary>
        public static string UploadPackage_SignedToUnsignedTransition {
            get {
                return ResourceManager.GetString("UploadPackage_SignedToUnsignedTransition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Snupkg upload failed. Please use latest NuGet clients (v 4.9.0 or above) and a V3 endpoint to push Symbol packages. For details, refer https://docs.microsoft.com/nuget/create-packages/symbol-packages-snupkg.
        /// </summary>
        public static string UploadPackage_SymbolsPackageNotAllowed {
            get {
                return ResourceManager.GetString("UploadPackage_SymbolsPackageNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unsupported icon image format. Only PNG and JPG images are supported..
        /// </summary>
        public static string UploadPackage_UnsupportedIconImageFormat {
            get {
                return ResourceManager.GetString("UploadPackage_UnsupportedIconImageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unsupported license type &apos;{0}&apos;..
        /// </summary>
        public static string UploadPackage_UnsupportedLicenseType {
            get {
                return ResourceManager.GetString("UploadPackage_UnsupportedLicenseType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unsupported license version &apos;{0}&apos;. The only supported license version is 1.0.0..
        /// </summary>
        public static string UploadPackage_UnsupportedLicenseVersion {
            get {
                return ResourceManager.GetString("UploadPackage_UnsupportedLicenseVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cannot upload file because an upload is already in progress..
        /// </summary>
        public static string UploadPackage_UploadInProgress {
            get {
                return ResourceManager.GetString("UploadPackage_UploadInProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Your account was locked after too many unsuccessful sign-in attempts. Please try again in {0}..
        /// </summary>
        public static string UserAccountLocked {
            get {
                return ResourceManager.GetString("UserAccountLocked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You have successfully confirmed your email address!.
        /// </summary>
        public static string UserEmailConfirmed {
            get {
                return ResourceManager.GetString("UserEmailConfirmed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Your email preferences have been updated..
        /// </summary>
        public static string UserEmailPreferencesUpdated {
            get {
                return ResourceManager.GetString("UserEmailPreferencesUpdated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You canceled your email address change request..
        /// </summary>
        public static string UserEmailUpdateCancelled {
            get {
                return ResourceManager.GetString("UserEmailUpdateCancelled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You cannot reset your password until you confirm your account..
        /// </summary>
        public static string UserIsNotYetConfirmed {
            get {
                return ResourceManager.GetString("UserIsNotYetConfirmed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A user key is required..
        /// </summary>
        public static string UserKeyIsRequired {
            get {
                return ResourceManager.GetString("UserKeyIsRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A unique user with that username or email address and password does not exist. Try logging on with your username if you were using an email address to log on..
        /// </summary>
        public static string UsernameAndPasswordNotFound {
            get {
                return ResourceManager.GetString("UsernameAndPasswordNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The username &apos;{0}&apos; is not available..
        /// </summary>
        public static string UsernameNotAvailable {
            get {
                return ResourceManager.GetString("UsernameNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A user with the provided user name does not exist..
        /// </summary>
        public static string UserNotFound {
            get {
                return ResourceManager.GetString("UserNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на We&apos;re performing the package delete right now. It may take a while for this change to propagate through our system..
        /// </summary>
        public static string UserPackageDeleteCompleteTransientMessage {
            get {
                return ResourceManager.GetString("UserPackageDeleteCompleteTransientMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You must confirm the package deletion request..
        /// </summary>
        public static string UserPackageDeleteConfirmationIsRequired {
            get {
                return ResourceManager.GetString("UserPackageDeleteConfirmationIsRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You must choose whether to delete the package or contact support..
        /// </summary>
        public static string UserPackageDeleteDecisionIsRequired {
            get {
                return ResourceManager.GetString("UserPackageDeleteDecisionIsRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на This support request is intended for automatic package deletion..
        /// </summary>
        public static string UserPackageDeleteSupportRequestMessage {
            get {
                return ResourceManager.GetString("UserPackageDeleteSupportRequestMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The file exceeds the size limit of {0} bytes..
        /// </summary>
        public static string ValidateCertificate_FileTooLarge {
            get {
                return ResourceManager.GetString("ValidateCertificate_FileTooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The file must be a DER encoded binary X.509 certificate..
        /// </summary>
        public static string ValidateCertificate_InvalidEncoding {
            get {
                return ResourceManager.GetString("ValidateCertificate_InvalidEncoding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The file length is invalid..
        /// </summary>
        public static string ValidateCertificate_InvalidFileLength {
            get {
                return ResourceManager.GetString("ValidateCertificate_InvalidFileLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The file extension must be {0}..
        /// </summary>
        public static string ValidateCertificate_InvalidFileType {
            get {
                return ResourceManager.GetString("ValidateCertificate_InvalidFileType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The file stream is invalid..
        /// </summary>
        public static string ValidateCertificate_InvalidStream {
            get {
                return ResourceManager.GetString("ValidateCertificate_InvalidStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The file stream must be seekable..
        /// </summary>
        public static string ValidateCertificate_StreamMustBeSeekable {
            get {
                return ResourceManager.GetString("ValidateCertificate_StreamMustBeSeekable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на User &apos;{0}&apos; does not have the rights to upload new versions of package &apos;{1}&apos;..
        /// </summary>
        public static string VerifyPackage_OwnerInvalid {
            get {
                return ResourceManager.GetString("VerifyPackage_OwnerInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на User &apos;{0}&apos; is unconfirmed and cannot be the owner of the package..
        /// </summary>
        public static string VerifyPackage_OwnerUnconfirmed {
            get {
                return ResourceManager.GetString("VerifyPackage_OwnerUnconfirmed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Your attempt to verify the package submission failed, because the package file appears to have changed. Please try again..
        /// </summary>
        public static string VerifyPackage_PackageFileModified {
            get {
                return ResourceManager.GetString("VerifyPackage_PackageFileModified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на There was an unexpected error. Please try uploading the package again..
        /// </summary>
        public static string VerifyPackage_UnexpectedError {
            get {
                return ResourceManager.GetString("VerifyPackage_UnexpectedError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Your attempt to verify the package submission failed, because we could not find the uploaded package file. Please try again..
        /// </summary>
        public static string VerifyPackage_UploadNotFound {
            get {
                return ResourceManager.GetString("VerifyPackage_UploadNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You do not have permission to upload packages as user &apos;{0}&apos;..
        /// </summary>
        public static string VerifyPackage_UserInvalid {
            get {
                return ResourceManager.GetString("VerifyPackage_UserInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The user &apos;{0}&apos; doesn&apos;t exist. You cannot upload a package as a user that doesn&apos;t exist..
        /// </summary>
        public static string VerifyPackage_UserNonExistent {
            get {
                return ResourceManager.GetString("VerifyPackage_UserNonExistent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на API &apos;{0}&apos; is deprecated and may be removed in a future version..
        /// </summary>
        public static string WarningApiDeprecated {
            get {
                return ResourceManager.GetString("WarningApiDeprecated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Your API key expires in {0}. Visit {1} to regenerate your API key..
        /// </summary>
        public static string WarningApiKeyAboutToExpire {
            get {
                return ResourceManager.GetString("WarningApiKeyAboutToExpire", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Your API key has expired. Visit {0} to generate a new API key..
        /// </summary>
        public static string WarningApiKeyExpired {
            get {
                return ResourceManager.GetString("WarningApiKeyExpired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Repository URL scheme should be &apos;https&apos; or &apos;git&apos;. The provided URL will not be displayed..
        /// </summary>
        public static string WarningNotHttpsOrGitRepositoryUrlScheme {
            get {
                return ResourceManager.GetString("WarningNotHttpsOrGitRepositoryUrlScheme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Repository URL scheme should be &apos;https&apos;. The provided URL will not be displayed..
        /// </summary>
        public static string WarningNotHttpsRepositoryUrlScheme {
            get {
                return ResourceManager.GetString("WarningNotHttpsRepositoryUrlScheme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Yes.
        /// </summary>
        public static string Yes {
            get {
                return ResourceManager.GetString("Yes", resourceCulture);
            }
        }
    }
}
